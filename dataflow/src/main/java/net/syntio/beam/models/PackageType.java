/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package net.syntio.beam.models;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class PackageType extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3835068319350991343L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PackageType\",\"namespace\":\"net.syntio.beam.models\",\"fields\":[{\"name\":\"PackageTypeID\",\"type\":\"int\"},{\"name\":\"PackageTypeName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"PackageTypeValidFrom\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"PackageTypeValidTo\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PackageType> ENCODER =
      new BinaryMessageEncoder<PackageType>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PackageType> DECODER =
      new BinaryMessageDecoder<PackageType>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<PackageType> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<PackageType> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<PackageType>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this PackageType to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a PackageType from a ByteBuffer. */
  public static PackageType fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public int PackageTypeID;
  @Deprecated public java.lang.String PackageTypeName;
  @Deprecated public java.lang.String PackageTypeValidFrom;
  @Deprecated public java.lang.String PackageTypeValidTo;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PackageType() {}

  /**
   * All-args constructor.
   * @param PackageTypeID The new value for PackageTypeID
   * @param PackageTypeName The new value for PackageTypeName
   * @param PackageTypeValidFrom The new value for PackageTypeValidFrom
   * @param PackageTypeValidTo The new value for PackageTypeValidTo
   */
  public PackageType(java.lang.Integer PackageTypeID, java.lang.String PackageTypeName, java.lang.String PackageTypeValidFrom, java.lang.String PackageTypeValidTo) {
    this.PackageTypeID = PackageTypeID;
    this.PackageTypeName = PackageTypeName;
    this.PackageTypeValidFrom = PackageTypeValidFrom;
    this.PackageTypeValidTo = PackageTypeValidTo;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return PackageTypeID;
    case 1: return PackageTypeName;
    case 2: return PackageTypeValidFrom;
    case 3: return PackageTypeValidTo;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: PackageTypeID = (java.lang.Integer)value$; break;
    case 1: PackageTypeName = (java.lang.String)value$; break;
    case 2: PackageTypeValidFrom = (java.lang.String)value$; break;
    case 3: PackageTypeValidTo = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'PackageTypeID' field.
   * @return The value of the 'PackageTypeID' field.
   */
  public java.lang.Integer getPackageTypeID() {
    return PackageTypeID;
  }

  /**
   * Sets the value of the 'PackageTypeID' field.
   * @param value the value to set.
   */
  public void setPackageTypeID(java.lang.Integer value) {
    this.PackageTypeID = value;
  }

  /**
   * Gets the value of the 'PackageTypeName' field.
   * @return The value of the 'PackageTypeName' field.
   */
  public java.lang.String getPackageTypeName() {
    return PackageTypeName;
  }

  /**
   * Sets the value of the 'PackageTypeName' field.
   * @param value the value to set.
   */
  public void setPackageTypeName(java.lang.String value) {
    this.PackageTypeName = value;
  }

  /**
   * Gets the value of the 'PackageTypeValidFrom' field.
   * @return The value of the 'PackageTypeValidFrom' field.
   */
  public java.lang.String getPackageTypeValidFrom() {
    return PackageTypeValidFrom;
  }

  /**
   * Sets the value of the 'PackageTypeValidFrom' field.
   * @param value the value to set.
   */
  public void setPackageTypeValidFrom(java.lang.String value) {
    this.PackageTypeValidFrom = value;
  }

  /**
   * Gets the value of the 'PackageTypeValidTo' field.
   * @return The value of the 'PackageTypeValidTo' field.
   */
  public java.lang.String getPackageTypeValidTo() {
    return PackageTypeValidTo;
  }

  /**
   * Sets the value of the 'PackageTypeValidTo' field.
   * @param value the value to set.
   */
  public void setPackageTypeValidTo(java.lang.String value) {
    this.PackageTypeValidTo = value;
  }

  /**
   * Creates a new PackageType RecordBuilder.
   * @return A new PackageType RecordBuilder
   */
  public static net.syntio.beam.models.PackageType.Builder newBuilder() {
    return new net.syntio.beam.models.PackageType.Builder();
  }

  /**
   * Creates a new PackageType RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PackageType RecordBuilder
   */
  public static net.syntio.beam.models.PackageType.Builder newBuilder(net.syntio.beam.models.PackageType.Builder other) {
    return new net.syntio.beam.models.PackageType.Builder(other);
  }

  /**
   * Creates a new PackageType RecordBuilder by copying an existing PackageType instance.
   * @param other The existing instance to copy.
   * @return A new PackageType RecordBuilder
   */
  public static net.syntio.beam.models.PackageType.Builder newBuilder(net.syntio.beam.models.PackageType other) {
    return new net.syntio.beam.models.PackageType.Builder(other);
  }

  /**
   * RecordBuilder for PackageType instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PackageType>
    implements org.apache.avro.data.RecordBuilder<PackageType> {

    private int PackageTypeID;
    private java.lang.String PackageTypeName;
    private java.lang.String PackageTypeValidFrom;
    private java.lang.String PackageTypeValidTo;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(net.syntio.beam.models.PackageType.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.PackageTypeID)) {
        this.PackageTypeID = data().deepCopy(fields()[0].schema(), other.PackageTypeID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.PackageTypeName)) {
        this.PackageTypeName = data().deepCopy(fields()[1].schema(), other.PackageTypeName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.PackageTypeValidFrom)) {
        this.PackageTypeValidFrom = data().deepCopy(fields()[2].schema(), other.PackageTypeValidFrom);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.PackageTypeValidTo)) {
        this.PackageTypeValidTo = data().deepCopy(fields()[3].schema(), other.PackageTypeValidTo);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing PackageType instance
     * @param other The existing instance to copy.
     */
    private Builder(net.syntio.beam.models.PackageType other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.PackageTypeID)) {
        this.PackageTypeID = data().deepCopy(fields()[0].schema(), other.PackageTypeID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.PackageTypeName)) {
        this.PackageTypeName = data().deepCopy(fields()[1].schema(), other.PackageTypeName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.PackageTypeValidFrom)) {
        this.PackageTypeValidFrom = data().deepCopy(fields()[2].schema(), other.PackageTypeValidFrom);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.PackageTypeValidTo)) {
        this.PackageTypeValidTo = data().deepCopy(fields()[3].schema(), other.PackageTypeValidTo);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'PackageTypeID' field.
      * @return The value.
      */
    public java.lang.Integer getPackageTypeID() {
      return PackageTypeID;
    }

    /**
      * Sets the value of the 'PackageTypeID' field.
      * @param value The value of 'PackageTypeID'.
      * @return This builder.
      */
    public net.syntio.beam.models.PackageType.Builder setPackageTypeID(int value) {
      validate(fields()[0], value);
      this.PackageTypeID = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'PackageTypeID' field has been set.
      * @return True if the 'PackageTypeID' field has been set, false otherwise.
      */
    public boolean hasPackageTypeID() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'PackageTypeID' field.
      * @return This builder.
      */
    public net.syntio.beam.models.PackageType.Builder clearPackageTypeID() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'PackageTypeName' field.
      * @return The value.
      */
    public java.lang.String getPackageTypeName() {
      return PackageTypeName;
    }

    /**
      * Sets the value of the 'PackageTypeName' field.
      * @param value The value of 'PackageTypeName'.
      * @return This builder.
      */
    public net.syntio.beam.models.PackageType.Builder setPackageTypeName(java.lang.String value) {
      validate(fields()[1], value);
      this.PackageTypeName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'PackageTypeName' field has been set.
      * @return True if the 'PackageTypeName' field has been set, false otherwise.
      */
    public boolean hasPackageTypeName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'PackageTypeName' field.
      * @return This builder.
      */
    public net.syntio.beam.models.PackageType.Builder clearPackageTypeName() {
      PackageTypeName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'PackageTypeValidFrom' field.
      * @return The value.
      */
    public java.lang.String getPackageTypeValidFrom() {
      return PackageTypeValidFrom;
    }

    /**
      * Sets the value of the 'PackageTypeValidFrom' field.
      * @param value The value of 'PackageTypeValidFrom'.
      * @return This builder.
      */
    public net.syntio.beam.models.PackageType.Builder setPackageTypeValidFrom(java.lang.String value) {
      validate(fields()[2], value);
      this.PackageTypeValidFrom = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'PackageTypeValidFrom' field has been set.
      * @return True if the 'PackageTypeValidFrom' field has been set, false otherwise.
      */
    public boolean hasPackageTypeValidFrom() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'PackageTypeValidFrom' field.
      * @return This builder.
      */
    public net.syntio.beam.models.PackageType.Builder clearPackageTypeValidFrom() {
      PackageTypeValidFrom = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'PackageTypeValidTo' field.
      * @return The value.
      */
    public java.lang.String getPackageTypeValidTo() {
      return PackageTypeValidTo;
    }

    /**
      * Sets the value of the 'PackageTypeValidTo' field.
      * @param value The value of 'PackageTypeValidTo'.
      * @return This builder.
      */
    public net.syntio.beam.models.PackageType.Builder setPackageTypeValidTo(java.lang.String value) {
      validate(fields()[3], value);
      this.PackageTypeValidTo = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'PackageTypeValidTo' field has been set.
      * @return True if the 'PackageTypeValidTo' field has been set, false otherwise.
      */
    public boolean hasPackageTypeValidTo() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'PackageTypeValidTo' field.
      * @return This builder.
      */
    public net.syntio.beam.models.PackageType.Builder clearPackageTypeValidTo() {
      PackageTypeValidTo = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PackageType build() {
      try {
        PackageType record = new PackageType();
        record.PackageTypeID = fieldSetFlags()[0] ? this.PackageTypeID : (java.lang.Integer) defaultValue(fields()[0]);
        record.PackageTypeName = fieldSetFlags()[1] ? this.PackageTypeName : (java.lang.String) defaultValue(fields()[1]);
        record.PackageTypeValidFrom = fieldSetFlags()[2] ? this.PackageTypeValidFrom : (java.lang.String) defaultValue(fields()[2]);
        record.PackageTypeValidTo = fieldSetFlags()[3] ? this.PackageTypeValidTo : (java.lang.String) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PackageType>
    WRITER$ = (org.apache.avro.io.DatumWriter<PackageType>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PackageType>
    READER$ = (org.apache.avro.io.DatumReader<PackageType>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
